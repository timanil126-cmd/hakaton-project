import { Module } from "../core/module";

export class SecretGameModule extends Module {
	constructor() {
		super("secret-game", "üéÆ –°–∫—Ä—ã—Ç–∞—è –ò–≥—Ä–∞");
		this.highscore = localStorage.getItem("duckHighscore") || 0;
		this.modal = null;
	}

	trigger() {
		this.renderGameModal();
		this.startGame();
	}

	renderGameModal() {
		// –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
		this.modal = document.createElement("div");
		this.modal.className = "game-modal";
		this.modal.id = "gameModal";

		this.modal.insertAdjacentHTML(
			"afterbegin",
			`
            <div class="game-container">
                <div class="game-header">
                <h2>ü¶Ü –£—Ç–∏–Ω–∞—è –û—Ö–æ—Ç–∞: –†–µ–∂–∏–º –ù–∏–Ω–¥–∑—è</h2>
                <div class="game-timer">–í—Ä–µ–º—è: <span id="gameTime">10</span>s</div>
                </div>
                
                <div class="game-field" id="gameField">
                <!-- –£—Ç–∫–∏ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å -->
                </div>
                
                <div class="game-stats">
                <div class="score">–ü–æ–ø–∞–¥–∞–Ω–∏—è: <span id="gameScore">0</span></div>
                <div class="highscore">–†–µ–∫–æ—Ä–¥: <span id="gameHighscore">${this.highscore}</span></div>
                </div>
                
                <button class="game-close" id="gameClose">√ó</button>
            </div>
            `
		);

		document.body.appendChild(this.modal);
	}

	startGame() {
		const gameField = this.modal.querySelector("#gameField");
		const timerElement = this.modal.querySelector("#gameTime");
		const scoreElement = this.modal.querySelector("#gameScore");
		const highscoreElement = this.modal.querySelector("#gameHighscore");
		const closeButton = this.modal.querySelector("#gameClose");

		// –°–±—Ä–æ—Å –∏–≥—Ä—ã
		gameField.innerHTML = "";
		let score = 0;
		let timeLeft = 10;
		let gameInterval;
		let ducks = [];

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
		this.modal.classList.add("active");

		// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏—è
		const createDuck = () => {
			const duck = document.createElement("div");
			duck.className = "game-duck";
			duck.innerHTML =
				'<img src="https://static.wixstatic.com/media/cf995d_23888b27b9e44aee855c130742fecd26~mv2.gif" style="width:100%;height:100%;">';

			// –°–ª—É—á–∞–π–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
			const maxX = gameField.offsetWidth - 60;
			const maxY = gameField.offsetHeight - 60;
			const startX = Math.random() * maxX;
			const startY = Math.random() * maxY;

			duck.style.left = `${startX}px`;
			duck.style.top = `${startY}px`;

			// –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
			const speedX = (Math.random() - 0.5) * 40;
			const speedY = (Math.random() - 0.5) * 40;

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
			duck.addEventListener("click", () => {
				score++;
				scoreElement.textContent = score;

				// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏—è
				duck.style.transition =
					"transform 0.2s ease, opacity 0.2s ease";
				duck.style.transform = "scale(1.5)";
				duck.style.opacity = "0";

				setTimeout(() => {
					duck.remove();
					ducks = ducks.filter((d) => d !== duck);
					createDuck(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —É—Ç–∫—É
				}, 200);
			});

			gameField.appendChild(duck);
			ducks.push({ element: duck, speedX, speedY });

			return duck;
		};

		// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —É—Ç–æ–∫
		const updateDucks = () => {
			ducks.forEach((duckData) => {
				const duck = duckData.element;
				let x = parseFloat(duck.style.left) || 0;
				let y = parseFloat(duck.style.top) || 0;

				// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				x += duckData.speedX;
				y += duckData.speedY;

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
				if (x <= 0 || x >= gameField.offsetWidth - 60) {
					duckData.speedX *= -1;
					x = Math.max(0, Math.min(x, gameField.offsetWidth - 60));
				}

				if (y <= 0 || y >= gameField.offsetHeight - 60) {
					duckData.speedY *= -1;
					y = Math.max(0, Math.min(y, gameField.offsetHeight - 60));
				}

				duck.style.left = `${x}px`;
				duck.style.top = `${y}px`;
			});
		};

		// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
		const startGameLoop = () => {
			// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ–∫ —Å—Ä–∞–∑—É
			for (let i = 0; i < 3; i++) {
				createDuck();
			}

			// –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —É—Ç–æ–∫
			const movementInterval = setInterval(updateDucks, 50);

			gameInterval = setInterval(() => {
				timeLeft--;
				timerElement.textContent = timeLeft;

				if (timeLeft <= 0) {
					clearInterval(movementInterval);
					endGame();
				}
			}, 1000);
		};

		// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
		const endGame = () => {
			clearInterval(gameInterval);

			if (score > this.highscore) {
				this.highscore = score;
				localStorage.setItem("duckHighscore", this.highscore);
				highscoreElement.textContent = this.highscore;
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			timerElement.textContent = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!";
			timerElement.style.color = "#ff6b6b";

			setTimeout(() => {
				this.modal.classList.remove("active");
				setTimeout(() => {
					this.modal.remove();
				}, 500);
			}, 3000);
		};

		// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
		closeButton.addEventListener("click", () => {
			clearInterval(gameInterval);
			this.modal.classList.remove("active");
			setTimeout(() => {
				this.modal.remove();
			}, 500);
		});

		// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
		const closeOnEscape = (e) => {
			if (e.key === "Escape") {
				clearInterval(gameInterval);
				this.modal.classList.remove("active");
				setTimeout(() => {
					this.modal.remove();
				}, 500);
				document.removeEventListener("keydown", closeOnEscape);
			}
		};

		document.addEventListener("keydown", closeOnEscape);

		// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
		startGameLoop();
	}
}
